{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","dispatch","get","then","data","catch","error","name","number","contact","post","contactId","delete","getContacts","state","contacts","items","getFilter","filter","isContactLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","useSelector","useDispatch","useState","setName","setNumber","handleChange","e","target","value","onSubmit","contactName","preventDefault","some","alert","contactsOperations","type","pattern","title","required","onChange","ContactListItem","id","onDeletContact","onClick","ContactList","map","Filter","contactsAction","App","isLoadingContacts","useEffect","color","height","width","createReducer","_","payload","combineReducers","store","configureStore","reducer","contactsReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca8a9d42.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');","\r\nimport axios from 'axios';\r\n\r\n// Компоненты\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n} from './contacts-actions';\r\n\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n        .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n    const contact = {\r\n        name,\r\n        number,\r\n    };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(({ data }) => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n    fetchContacts,\r\n    addContact,\r\n    deleteContact,\r\n};","import { createSelector } from \"reselect\";\r\n\r\n\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const isContactLoading = state => state.contacts.loading;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n    [getContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(normalizedFilter),\r\n        );\r\n    });","import { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\r\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\n\r\n// import styles from './ContactForm.module.css';\r\n\r\n\r\nexport default function ContactForm() {\r\n    const contacts = useSelector(getContacts);\r\n    const dispatch = useDispatch()\r\n\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const handleChange = e => {\r\n        const { name, value } = e.target;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const findByName = contactName => {\r\n        return contacts.some(({ name }) => name === contactName);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (findByName(name)) {\r\n            alert(`${name} is already in contacts!`);\r\n            return;\r\n        }\r\n\r\n        dispatch(contactsOperations.addContact({name, number}))\r\n\r\n        setName(\"\");\r\n        setNumber(\"\");\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} >\r\n            <label >\r\n                Name\r\n                <input\r\n\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n            <label >\r\n                Number\r\n                <input\r\n\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    value={number}\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n\r\n            <button type=\"submit\" >\r\n                Add contact\r\n            </button>\r\n        </form>\r\n    );\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n// import styles from './ContactListItem.module.css';\r\n\r\nconst ContactListItem = ({ name, number, id, onDeletContact }) => {\r\n    return (\r\n        <li >\r\n            <p >\r\n                {' '}\r\n                {name}: {number}\r\n            </p>\r\n            <button\r\n\r\n                type=\"button\"\r\n                onClick={() => onDeletContact(id)}\r\n            >\r\n                Delete\r\n            </button>\r\n        </li>\r\n    )};\r\n\r\nContactListItem.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    onDeletContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;","import React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n// Компоненты\r\nimport ContactListItem from '../ContactListItem/ContactListItem';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\n// Стили\r\n// import styles from './ContactList.module.css';\r\n\r\n\r\nconst ContactList = () => {\r\n    const contacts = useSelector(getVisibleContacts);\r\n    const dispatch = useDispatch();\r\n    const onDeletContact = id => dispatch(contactsOperations.deleteContact(id))\r\n\r\n    return (\r\n        <ul >\r\n            {contacts.map(({ id, name, number }) => (\r\n                <ContactListItem\r\n                    key={id}\r\n                    id={id}\r\n                    name={name}\r\n                    number={number}\r\n                    onDeletContact={()=> onDeletContact(id)}\r\n                />\r\n            ))}\r\n        </ul>\r\n    )};\r\n\r\n\r\nexport default ContactList;\r\n\r\n","// Модули\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n// import contactsAction from '../../redux/contacts/contacts-action';\r\nimport * as contactsAction from '../../redux/contacts/contacts-actions';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\n\r\n// Стили\r\n// import styles from './Filter.module.css';\r\n\r\n\r\nconst Filter = () => {\r\n\r\n    const value = useSelector(getFilter);\r\n    const dispatch = useDispatch();\r\n    const onChange = e => dispatch(contactsAction.changeFilter(e.target.value))\r\n\r\n    return (\r\n        <label >\r\n            Find contacts by name\r\n            <input\r\n\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n        </label>\r\n    );\r\n};\r\n\r\n\r\nexport default Filter;","\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from 'react';\n\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport contactsOperations from './redux/contacts/contacts-operations';\nimport Loader from \"react-loader-spinner\";\nimport {isContactLoading } from './redux/contacts/contacts-selectors';\n\n\n// import styles from './App.module.css';\n\n\nconst App = () => {\n    const isLoadingContacts = useSelector(isContactLoading);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <div >\n            <h1 >Phonebook</h1>\n            <ContactForm  />\n            <h2 >Contacts</h2>\n            <Filter />\n            {isLoadingContacts && <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} />}\n            <ContactList />\n        </div>\n    );\n}\n\nexport default App;","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\n// Компоненты\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    changeFilter\r\n} from './contacts-actions';\r\n\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSuccess]:(_, { payload }) =>payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n});","import { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n    // persistStore,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\n\r\n\r\n// Компоненты\r\nimport contactsReducers from './contacts/contacts-reducer';\r\n\r\n\r\nconst middleware = (getDefaultMiddleware) => getDefaultMiddleware({\r\n    serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n}).concat(logger);\r\n\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducers,\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from 'redux/store';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}